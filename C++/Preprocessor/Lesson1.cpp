/*
Директивы препроцессора - это команды, которые передаются компилятору до начала компиляции.
Директивы препроцессора начинаются с символа # и распознаются компилятором до начала компиляции.

 Препроцессор - не имеет никакого отношения к самому процессору, разве что все на нашем компьютере работает
 через процессор.
 Тут все исходит от слов
 "pre" - предварительный.
 "process" - процесс.
 ну и суффикс "or" - в английском языке обозначает "тот кто что либо выполняет".
 Например driver от глагола to drive - водить.

Запуск проограммы в С++ всегда проходи в три этапа:
1. Предварительная обработка (Preprocessing)
2. Компиляция (Compilation)
3. Линковщик (Linking)

Препроцессор - читает исходный все, что начинается с # и выполняет соответствующие действия.
Компилятор - читает исходный код и преобразует его в машинный код(.obj file).
Линковщик - объединяет все нужные .obj файлы в один исполняемый файл.


Директивы препроцессора:
1. #include - включает файл в программу.
2. #define - определяет макрос.
3. #undef - отменяет определение макроса.
4. #if - проверяет условие.
5. #ifdef - проверяет, определен ли макрос.
6. #ifndef - проверяет, не определен ли макрос.
7. #else - выполняется, если условие в #if или #ifdef не выполняется.
8. #endif - завершает условие.
9. #error - выводит сообщение об ошибке.
10. #pragma - выполняет специальные действия компилятору.
11. #line - изменяет номер строки.
12. #warning - выводит предупреждение.
13. #ident - выводит строку идентификации.
14. #region - начинает регион.
15. #endregion - завершает регион.
16. #pragma once - включает файл только один раз.

*/

#include <iostream>
#define SUM(x, y) x + y
#define PI 3.14f // Это просто глобальная константа
// Но в чем же тогда отличие между #define и const?
// По сути define тупо заменяет все вхождения PI на 3.14f

#define ShalomMaqa cout << "Salam Aleykum Maqomed" << endl;
using namespace std;


// Самое главное отличие - это время жизни переменной.
// const - это константа, которая хранится в памяти во время выполнения программы.
// #define - это константа, которая хранится в памяти во время компиляции программы.



int main() {
    ShalomMaqa;
    cout << PI << endl;
    cout << 3.14f << endl;

    cout << SUM(2, 3) << endl;

    return 0;
}

#include <iostream>
using namespace std;

// Person = надо расценивать как тип данных.
// когда говорят создай структуру, то это значит описать какой-то тип
// в данном случае это тип данных Person
// переменные внутри структуры называются полями(field)
// функции внутри структуры называются методами(method)

/*
   Вопрос №1: Почему мы не можем создать структуру Person внутри функции main?
   Ответ:
   Потому что структура Person будет видна только внутри функции main.
   По хорошему вообще структуры надо создавать в отдельном файле.

    Вопрос №2: Почему ООП в данном случае ресурсоемкая технология?
    Ответ:
    Давайте посчитаем сколько памяти занимает структура Person.
*/

struct Person
{
    char* name;
    char* surname;
    int age;

    void print()
    {
        cout << name << " " << surname << " " << age << endl;
    }
};



int main()
{
    // Еще раз. Структура Person - это тип данных.

    // Хорошо ли создавать переменную Person в Stack?
    // NET
    // Потому что структура Person занимает 12 байт.
    // При создании переменной в Stack, выделяется 12 байт памяти.
    // При выходе из функции main, эта память освобождается.
    // Поэтому нельзя создавать переменную Person в Stack.

    Person a;

    a.name = "Ivan";
    a.surname = "Ivanov";
    a.age = 20;

    a.print();


    Person* b = new Person;
    // Если мы создаем переменную как указатель, то обращение к полям происходит через указатель.
    // Пишем не точку, а стрелочку.
    // Вы же не любите когда разименовывание

    // Вместо этого
    (*b).name = "Petr";
    // Вот так
    b->name = "Petr";



    return 0;
}

Статьи:

https://dev.to/ruppysuppy/beautify-your-github-profile-like-a-pro-5093
https://medium.com/codex/making-your-github-profile-look-awesome-869d6d130dbb
https://github.com/drknzz/GitHub-Achievements 

Про гит

Перед тем как начать работать с гитом, нужно установить его на компьютер.
Скачать можно здесь: https://git-scm.com/downloads

После установки нужно настроить гит. Для этого нужно открыть консоль и ввести следующие команды:

git config --global user.name "Ваше имя"
git config --global user.email "Ваша почта"


Локальная конфигурация
----------------------
Конфигурация в конкретном репозитории хранится в файле .git/config.
При этом папка .git является скрытой, поэтому ее нужно открыть в проводнике, нажав на пункт "Показать скрытые папки и файлы".

Глоабльная конфигурация
-----------------------
Конфигурация во всех репозиториях хранится в файле .gitconfig, который находится в домашней папке пользователя.

Что такое репозиторий?
----------------------
Репозиторий - это папка, в которой хранятся все файлы проекта, а также информация о них.
Также в репозитории хранится информация о всех изменениях, которые были сделаны в файлах.
То есть он хранит историю изменений, по которым можно откатиться к прошлым версиям файлов.

Создание репозитория
--------------------
Для создания репозитория нужно перейти в папку, в которой он будет храниться, и выполнить команду:
git init

После этого в папке появится папка .git, в которой хранится информация о репозитории.

Клонирование репозитория
------------------------
Для клонирования репозитория нужно выполнить команду:
git clone

При клонировании репозитория создается папка с именем репозитория, в которой хранится информация о нем.
Скачиваются все ветки репозитория, а также все файлы, которые находятся в них, но не скачиваются файлы, которые игнорируются.
Чтобы переключиться на другую ветку, нужно выполнить команду:
git checkout <имя ветки>

Добавление файлов в репозиторий
-------------------------------
Для добавления файлов в репозиторий нужно выполнить команду:
git add <имя файла> или git add . (добавляет все файлы)
После этого файлы будут добавлены в индекс, то есть в список файлов, которые будут добавлены в репозиторий.
______________________________
git status - показывает статус репозитория.
git diff - показывает разницу между текущим состоянием файлов и тем, как они были добавлены в репозиторий.
______________________________
После того, как вы сделали git init.
Вам надо создать файл .gitignore, в котором перечислить все файлы, которые не нужно добавлять в репозиторий.
______________________________
Зачем нужна команда git remote ?
Чтобы каждый раз не писать полный адрес удаленного репозитория, можно добавить его в список удаленных репозиториев.

git remote - список удаленных репозиториев (серверов) для текущего репозитория (локального).
git remote add <имя удаленного репозитория> <адрес удаленного репозитория>  - добавляет удаленный репозиторий.
git remote remove <имя удаленного репозитория> - удаляет удаленный репозиторий.
git remote rename <имя удаленного репозитория> <новое имя удаленного репозитория> - переименовывает удаленный репозиторий.
git remote show <имя удаленного репозитория> - показывает информацию о удаленном репозитории.

______________________________
commit - это сохранение текущего состояния файлов в репозитории. Без коммита изменения не сохраняются и не попадают в репозиторий.
git commit - создает коммит, то есть сохраняет текущее состояние файлов в репозитории.
git commit -m "Сообщение" - создает коммит с сообщением.
______________________________
Почему нельзя работать в ветке master?
Потому что в ветке master хранится рабочая версия проекта, а в ней не должно быть ошибок.
Поэтому в ветку master нельзя добавлять изменения, которые могут сломать проект.
______________________________
git push - отправляет изменения из локального репозитория в удаленный репозиторий.
git push <имя удаленного репозитория> <имя ветки> - отправляет изменения из локального репозитория в удаленный репозиторий.
git push <имя удаленного репозитория> <имя ветки> -f - отправляет изменения из локального репозитория в удаленный репозиторий, игнорируя проверку на конфликты.
git push <имя удаленного репозитория> <имя ветки> --set-upstream - отправляет изменения из локального репозитория в удаленный репозиторий и создает связь между ветками.
______________________________
git checkout -b <имя ветки> - создает новую ветку и переключается на нее.
git checkout <имя ветки> - переключается на ветку.
git checkout - - переключается на предыдущую ветку.
______________________________
git branch - показывает список веток и текущую ветку с символом *.
git branch <имя ветки> - создает новую ветку.
Разница между git checkout -b и git branch:
git checkout -b <имя ветки> - создает новую ветку и переключается на нее.
git branch <имя ветки> - создает новую ветку.
______________________________
git pull - получает изменения из удаленного репозитория и сливает их с локальным репозиторием.
git pull <имя удаленного репозитория> <имя ветки> - получает изменения из удаленного репозитория и сливает их с локальным репозиторием.